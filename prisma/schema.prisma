// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Role {
  admin
  user
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Type {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  title       String

  type   Type   @relation(fields: [typeId], references: [id])
  typeId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  productImage ProductImage[]
  OrderItem    OrderItem[]
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  UserAddress UserAddress?
  Order       Order[]
}

model Country {
  id   String @id
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id          String  @id @default(uuid())
  names       String
  lastNames   String
  address     String
  address2    String?
  zipCode     String
  city        String
  mobilePhone String
  saveForm    Boolean

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  //relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id          String  @id @default(uuid())
  names       String
  lastNames   String
  address     String
  address2    String
  zipCode     String
  city        String
  mobilePhone String
  saveForm    Boolean

  // relaciones 
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
